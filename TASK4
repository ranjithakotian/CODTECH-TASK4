import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender;
import org.apache.mahout.cf.taste.impl.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class RecommendationSystem {

    public static void main(String[] args) {
        try {
            // Load the user-item ratings data from a CSV file
            DataModel model = new FileDataModel(new File("ratings.csv"));
            
            // Calculate User Similarity using Pearson Correlation
            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
            
            // Create the recommender
            Recommender recommender = new AbstractRecommender(model, similarity) {
                @Override
                protected float estimatePreference(long userID, long itemID) throws TasteException {
                    return 0;  // Implement custom logic if needed
                }
            };
            
            // Get top 3 recommendations for user with ID 1
            List<RecommendedItem> recommendations = recommender.recommend(1, 3);
            
            // Display recommendations
            for (RecommendedItem recommendation : recommendations) {
                System.out.println("Recommended Item ID: " + recommendation.getItemID() + 
                        ", Preference: " + recommendation.getValue());
            }
            
        } catch (IOException | TasteException e) {
            e.printStackTrace();
        }
    }
}
